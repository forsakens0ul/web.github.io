{"version":3,"sources":["assets/fonts/gotham-bold.woff2","components/Heading/index.js","components/Text/index.js","components/Section/index.js","components/DecoderText/index.js","components/Divider/index.js","components/Input/TextArea.js","components/Input/index.js","pages/Contact/index.js"],"names":["Heading","children","level","as","align","weight","className","rest","clampedLevel","Math","min","max","Component","Helmet","rel","href","GothamBold","crossorigin","classNames","Text","size","secondary","Section","forwardRef","ref","glyphs","CharType","DecoderText","text","start","delay","startDelay","output","useRef","type","value","container","reduceMotion","usePrefersReducedMotion","useEffect","containerInstance","current","content","split","animation","renderOutput","characterMap","map","item","innerHTML","join","springValue","position","index","rand","floor","random","length","shuffle","prerender","chain","spring","from","to","stiffness","damping","stop","aria-hidden","memo","Divider","lineWidth","lineHeight","notchWidth","notchHeight","collapseDelay","collapsed","style","numToMs","defaultProps","TextArea","resize","onChange","minRows","maxRows","rows","setRows","useState","textareaDimensions","setTextareaDimensions","textareaRef","getComputedStyle","parseInt","paddingHeight","paddingTop","paddingBottom","event","previousRows","target","currentRows","scrollHeight","scrollTop","Input","id","label","hasValue","multiline","error","onBlur","focused","setFocused","generatedId","useId","errorRef","inputId","labelId","errorId","InputElement","htmlFor","aria-labelledby","aria-describedby","undefined","onFocus","TransitionGroup","component","Transition","timeout","msToNum","tokens","base","durationM","status","role","isVisible","numToPx","getBoundingClientRect","height","Icon","icon","initDelay","durationS","getDelay","delayMs","initDelayMs","multiplier","numDelay","toFixed","Contact","useRouteTransition","email","useFormInput","message","sending","setSending","complete","setComplete","statusError","setStatusError","useScrollRestore","onSubmit","useCallback","async","preventDefault","response","fetch","method","mode","headers","body","JSON","stringify","responseMessage","json","errorMessage","fallback","500","404","getStatusError","Error","name","appear","mountOnEnter","unmountOnExit","onEnter","reflow","durationXS","required","autoComplete","maxLength","errorStatus","Button","disabled","loading","loadingText","aria-live","iconHoverShift"],"mappings":"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","file":"static/js/6.e79cc548.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/gotham-bold.73ce573b.woff2\";","import { Fragment } from 'react'\r\nimport classNames from 'classnames'\r\nimport { Helmet } from 'react-helmet'\r\nimport GothamBold from 'assets/fonts/gotham-bold.woff2'\r\nimport './index.css'\r\n\r\nconst Heading = ({\r\n    children,\r\n    level = 1,\r\n    as,\r\n    align = 'auto',\r\n    weight = 'medium',\r\n    className,\r\n    ...rest\r\n}) => {\r\n    const clampedLevel = Math.min(Math.max(level, 0), 4)\r\n    const Component = as || `h${Math.max(clampedLevel, 1)}`\r\n\r\n    return (\r\n        <Fragment>\r\n            {/* Conditionally load the bold font weight because we use it less frequently */}\r\n            {weight === 'bold' && (\r\n                <Helmet>\r\n                    <link rel=\"preload\" href={GothamBold} as=\"font\" crossorigin=\"\" />\r\n                    <style>\r\n                        {`\r\n              @font-face {\r\n                font-family: 'Gotham';\r\n                font-weight: 700;\r\n                src: url(${GothamBold}) format('woff2');\r\n                font-display: swap;\r\n              }\r\n            `}\r\n                    </style>\r\n                </Helmet>\r\n            )}\r\n            <Component\r\n                className={classNames(\r\n                    className,\r\n                    'heading',\r\n                    `heading--align-${align}`,\r\n                    `heading--level-${clampedLevel}`,\r\n                    `heading--weight-${weight}`\r\n                )}\r\n                {...rest}\r\n            >\r\n                {children}\r\n            </Component>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Heading\r\n","import classNames from 'classnames'\r\nimport './index.css'\r\n\r\nconst Text = ({\r\n    children,\r\n    size = 'm',\r\n    as: Component = 'p',\r\n    align = 'auto',\r\n    weight = 'auto',\r\n    secondary,\r\n    className,\r\n    ...rest\r\n}) => {\r\n    return (\r\n        <Component\r\n            className={classNames(\r\n                className,\r\n                'text',\r\n                `text--align-${align}`,\r\n                `text--size-${size}`,\r\n                `text--weight-${weight}`,\r\n                {\r\n                    'text--secondary': secondary,\r\n                }\r\n            )}\r\n            {...rest}\r\n        >\r\n            {children}\r\n        </Component>\r\n    )\r\n}\r\n\r\nexport default Text\r\n","import { forwardRef } from 'react'\r\nimport classNames from 'classnames'\r\nimport './index.css'\r\n\r\nconst Section = forwardRef(\r\n    ({ as: Component = 'div', children, className, ...rest }, ref) => (\r\n        <Component className={classNames('section', className)} ref={ref} {...rest}>\r\n            {children}\r\n        </Component>\r\n    )\r\n)\r\n\r\nexport default Section\r\n","import { useRef, useEffect, memo } from 'react'\r\nimport classNames from 'classnames'\r\nimport { usePrefersReducedMotion } from 'hooks'\r\nimport { spring, chain, delay, value } from 'popmotion'\r\nimport VisuallyHidden from 'components/VisuallyHidden'\r\nimport prerender from 'utils/prerender'\r\nimport './index.css'\r\n\r\n// prettier-ignore\r\nconst glyphs = [\r\n  'ア', 'イ', 'ウ', 'エ', 'オ',\r\n  'カ', 'キ', 'ク', 'ケ', 'コ',\r\n  'サ', 'シ', 'ス', 'セ', 'ソ',\r\n  'タ', 'チ', 'ツ', 'テ', 'ト',\r\n  'ナ', 'ニ', 'ヌ', 'ネ', 'ノ',\r\n  'ハ', 'ヒ', 'フ', 'ヘ', 'ホ',\r\n  'マ', 'ミ', 'ム', 'メ', 'モ',\r\n  'ヤ', 'ユ', 'ヨ', 'ー',\r\n  'ラ', 'リ', 'ル', 'レ', 'ロ',\r\n  'ワ', 'ヰ', 'ヱ', 'ヲ', 'ン',\r\n  'ガ', 'ギ', 'グ', 'ゲ', 'ゴ',\r\n  'ザ', 'ジ', 'ズ', 'ゼ', 'ゾ',\r\n  'ダ', 'ヂ', 'ヅ', 'デ', 'ド',\r\n  'バ', 'ビ', 'ブ', 'ベ', 'ボ',\r\n  'パ', 'ピ', 'プ', 'ペ', 'ポ',\r\n];\r\n\r\nconst CharType = {\r\n    Glyph: 'glyph',\r\n    Value: 'value',\r\n}\r\n\r\nfunction shuffle(content, output, position) {\r\n    return content.map((value, index) => {\r\n        if (index < position) {\r\n            return { type: CharType.Value, value }\r\n        }\r\n\r\n        if (position % 1 < 0.5) {\r\n            const rand = Math.floor(Math.random() * glyphs.length)\r\n            return { type: CharType.Glyph, value: glyphs[rand] }\r\n        }\r\n\r\n        return { type: CharType.Glyph, value: output[index].value }\r\n    })\r\n}\r\n\r\nconst DecoderText = ({\r\n    text,\r\n    start = true,\r\n    delay: startDelay = 0,\r\n    className,\r\n    ...rest\r\n}) => {\r\n    const output = useRef([{ type: CharType.Glyph, value: '' }])\r\n    const container = useRef()\r\n    const reduceMotion = usePrefersReducedMotion()\r\n\r\n    useEffect(() => {\r\n        const containerInstance = container.current\r\n        const content = text.split('')\r\n        let animation\r\n\r\n        const renderOutput = () => {\r\n            const characterMap = output.current.map(item => {\r\n                return `<span class=\"decoder-text__${item.type}\">${item.value}</span>`\r\n            })\r\n\r\n            containerInstance.innerHTML = characterMap.join('')\r\n        }\r\n\r\n        const springValue = value(0, position => {\r\n            output.current = shuffle(content, output.current, position)\r\n            renderOutput()\r\n        })\r\n\r\n        if (start && !animation && !reduceMotion && !prerender) {\r\n            animation = chain(\r\n                delay(startDelay),\r\n                spring({\r\n                    from: 0,\r\n                    to: content.length,\r\n                    stiffness: 8,\r\n                    damping: 5,\r\n                })\r\n            ).start(springValue)\r\n        }\r\n\r\n        if (reduceMotion) {\r\n            output.current = content.map((value, index) => ({\r\n                type: CharType.Value,\r\n                value: content[index],\r\n            }))\r\n            renderOutput()\r\n        }\r\n\r\n        return () => {\r\n            if (animation) {\r\n                animation.stop()\r\n            }\r\n        }\r\n    }, [reduceMotion, start, startDelay, text])\r\n\r\n    return (\r\n        <span className={classNames('decoder-text', className)} {...rest}>\r\n            <VisuallyHidden className=\"decoder-text__label\">{text}</VisuallyHidden>\r\n            <span aria-hidden className=\"decoder-text__content\" ref={container} />\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default memo(DecoderText)\r\n","import classNames from 'classnames'\r\nimport { numToMs } from 'utils/style'\r\nimport './index.css'\r\n\r\nconst Divider = ({\r\n    lineWidth,\r\n    lineHeight,\r\n    notchWidth,\r\n    notchHeight,\r\n    collapseDelay,\r\n    collapsed,\r\n    className,\r\n    style,\r\n}) => (\r\n    <div\r\n        className={classNames('divider', className)}\r\n        style={{\r\n            '--lineWidth': lineWidth,\r\n            '--lineHeight': lineHeight,\r\n            '--notchWidth': notchWidth,\r\n            '--notchHeight': notchHeight,\r\n            '--collapseDelay': numToMs(collapseDelay),\r\n            ...style,\r\n        }}\r\n    >\r\n        <div\r\n            className={classNames('divider__line', {\r\n                'divider__line--collapsed': collapsed,\r\n            })}\r\n        />\r\n        <div\r\n            className={classNames('divider__notch', {\r\n                'divider__notch--collapsed': collapsed,\r\n            })}\r\n            style={{ '--collapseDelay': numToMs(collapseDelay + 160) }}\r\n        />\r\n    </div>\r\n)\r\n\r\nDivider.defaultProps = {\r\n    lineWidth: '100%',\r\n    lineHeight: '2px',\r\n    notchWidth: '90px',\r\n    notchHeight: '10px',\r\n    collapsed: false,\r\n    collapseDelay: 0,\r\n}\r\n\r\nexport default Divider\r\n","import { useRef, useState, useEffect } from 'react'\r\nimport classNames from 'classnames'\r\nimport './TextArea.css'\r\n\r\nconst TextArea = ({\r\n    className,\r\n    resize = 'none',\r\n    value,\r\n    onChange,\r\n    minRows = 1,\r\n    maxRows,\r\n    ...rest\r\n}) => {\r\n    const [rows, setRows] = useState(minRows)\r\n    const [textareaDimensions, setTextareaDimensions] = useState()\r\n    const textareaRef = useRef()\r\n\r\n    useEffect(() => {\r\n        const style = getComputedStyle(textareaRef.current)\r\n        const lineHeight = parseInt(style.lineHeight, 10)\r\n        const paddingHeight =\r\n            parseInt(style.paddingTop, 10) + parseInt(style.paddingBottom, 10)\r\n        setTextareaDimensions({ lineHeight, paddingHeight })\r\n    }, [])\r\n\r\n    const handleChange = event => {\r\n        onChange(event)\r\n\r\n        const { lineHeight, paddingHeight } = textareaDimensions\r\n        const previousRows = event.target.rows\r\n        event.target.rows = minRows\r\n\r\n        const currentRows = ~~((event.target.scrollHeight - paddingHeight) / lineHeight)\r\n\r\n        if (currentRows === previousRows) {\r\n            event.target.rows = currentRows\r\n        }\r\n\r\n        if (maxRows && currentRows >= maxRows) {\r\n            event.target.rows = maxRows\r\n            event.target.scrollTop = event.target.scrollHeight\r\n        }\r\n\r\n        setRows(maxRows && currentRows > maxRows ? maxRows : currentRows)\r\n    }\r\n\r\n    return (\r\n        <textarea\r\n            className={classNames('textarea', className)}\r\n            ref={textareaRef}\r\n            onChange={handleChange}\r\n            style={{ '--resize': resize }}\r\n            rows={rows}\r\n            value={value}\r\n            {...rest}\r\n        />\r\n    )\r\n}\r\n\r\nexport default TextArea\r\n","import { useState, useRef } from 'react'\r\nimport classNames from 'classnames'\r\nimport { TransitionGroup, Transition } from 'react-transition-group'\r\nimport TextArea from './TextArea'\r\nimport { useId } from 'hooks'\r\nimport { isVisible } from 'utils/transition'\r\nimport { tokens } from 'components/ThemeProvider/theme'\r\nimport { msToNum, numToPx } from 'utils/style'\r\nimport Icon from 'components/Icon'\r\nimport './index.css'\r\n\r\nconst Input = ({\r\n    id,\r\n    label,\r\n    hasValue,\r\n    value,\r\n    multiline,\r\n    className,\r\n    style,\r\n    error,\r\n    onBlur,\r\n    ...rest\r\n}) => {\r\n    const [focused, setFocused] = useState(false)\r\n    const generatedId = useId()\r\n    const errorRef = useRef()\r\n    const inputId = id || `input-${generatedId}`\r\n    const labelId = `${inputId}-label`\r\n    const errorId = `${inputId}-error`\r\n    const InputElement = multiline ? TextArea : 'input'\r\n\r\n    const handleBlur = event => {\r\n        setFocused(false)\r\n\r\n        if (onBlur) {\r\n            onBlur(event)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={classNames('input', className, { 'input--error': !!error })}\r\n            style={style}\r\n        >\r\n            <div className=\"input__content\">\r\n                <label\r\n                    className={classNames('input__label', {\r\n                        'input__label--focused': focused,\r\n                        'input__label--has-value': !!value,\r\n                    })}\r\n                    id={labelId}\r\n                    htmlFor={inputId}\r\n                >\r\n                    {label}\r\n                </label>\r\n                <InputElement\r\n                    className=\"input__element\"\r\n                    id={inputId}\r\n                    aria-labelledby={labelId}\r\n                    aria-describedby={!!error ? errorId : undefined}\r\n                    onFocus={() => setFocused(true)}\r\n                    onBlur={handleBlur}\r\n                    value={value}\r\n                    {...rest}\r\n                />\r\n                <div\r\n                    className={classNames('input__underline', {\r\n                        'input__underline--focused': focused,\r\n                    })}\r\n                />\r\n            </div>\r\n            <TransitionGroup component={null}>\r\n                {!!error && (\r\n                    <Transition timeout={msToNum(tokens.base.durationM)}>\r\n                        {status => (\r\n                            <div\r\n                                className={classNames(\r\n                                    'input__error',\r\n                                    `input__error--${status}`\r\n                                )}\r\n                                id={errorId}\r\n                                role=\"alert\"\r\n                                style={{\r\n                                    '--height': isVisible(status)\r\n                                        ? numToPx(\r\n                                              errorRef.current?.getBoundingClientRect()\r\n                                                  .height\r\n                                          )\r\n                                        : '0px',\r\n                                }}\r\n                            >\r\n                                <div className=\"input__error-message\" ref={errorRef}>\r\n                                    <Icon icon=\"error\" />\r\n                                    {error}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </Transition>\r\n                )}\r\n            </TransitionGroup>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input\r\n","import { useState, useCallback, useRef } from 'react'\r\nimport classNames from 'classnames'\r\nimport { TransitionGroup, Transition } from 'react-transition-group'\r\nimport { Helmet } from 'react-helmet'\r\nimport Input from 'components/Input'\r\nimport DecoderText from 'components/DecoderText'\r\nimport Divider from 'components/Divider'\r\nimport { Button } from 'components/Button'\r\nimport Section from 'components/Section'\r\nimport Icon from 'components/Icon'\r\nimport { useScrollRestore, useFormInput, useRouteTransition } from 'hooks'\r\nimport { reflow, isVisible } from 'utils/transition'\r\nimport prerender from 'utils/prerender'\r\nimport { msToNum, numToPx, numToMs } from 'utils/style'\r\nimport { tokens } from 'components/ThemeProvider/theme'\r\nimport Heading from 'components/Heading'\r\nimport Text from 'components/Text'\r\nimport './index.css'\r\n\r\nconst initDelay = tokens.base.durationS\r\n\r\nfunction getStatusError({\r\n    status,\r\n    errorMessage,\r\n    fallback = 'There was a problem with your request',\r\n}) {\r\n    if (status === 200) return false\r\n\r\n    const statuses = {\r\n        500: 'There was a problem with the server, try again later',\r\n        404: 'There was a problem connecting to the server. Make sure you are connected to the internet',\r\n    }\r\n\r\n    if (errorMessage) {\r\n        return errorMessage\r\n    }\r\n\r\n    return statuses[status] || fallback\r\n}\r\n\r\nfunction getDelay(delayMs, initDelayMs = numToMs(0), multiplier = 1) {\r\n    const numDelay = msToNum(delayMs) * multiplier\r\n    return { '--delay': numToMs((msToNum(initDelayMs) + numDelay).toFixed(0)) }\r\n}\r\n\r\nconst Contact = () => {\r\n    const { status } = useRouteTransition()\r\n    const errorRef = useRef()\r\n    const email = useFormInput('')\r\n    const message = useFormInput('')\r\n    const [sending, setSending] = useState(false)\r\n    const [complete, setComplete] = useState(false)\r\n    const [statusError, setStatusError] = useState('')\r\n    useScrollRestore()\r\n\r\n    const onSubmit = useCallback(\r\n        async event => {\r\n            event.preventDefault()\r\n            setStatusError('')\r\n\r\n            if (sending) return\r\n\r\n            try {\r\n                setSending(true)\r\n\r\n                const response = await fetch('/api/message', {\r\n                    method: 'POST',\r\n                    mode: 'cors',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({\r\n                        email: email.value,\r\n                        message: message.value,\r\n                    }),\r\n                })\r\n\r\n                const responseMessage = await response.json()\r\n\r\n                const statusError = getStatusError({\r\n                    status: response?.status,\r\n                    errorMessage: responseMessage?.error,\r\n                    fallback: 'There was a problem sending your message',\r\n                })\r\n\r\n                if (statusError) throw new Error(statusError)\r\n\r\n                setComplete(true)\r\n                setSending(false)\r\n            } catch (error) {\r\n                setSending(false)\r\n                setStatusError(error.message)\r\n            }\r\n        },\r\n        [email.value, message.value, sending]\r\n    )\r\n\r\n    return (\r\n        <Section className={classNames('contact', `contact--${status}`)}>\r\n            <Helmet>\r\n                <title>Contact | Alen Yohannan</title>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Send me a message if you’re interested in discussing a project or if you just want to say hi\"\r\n                />\r\n            </Helmet>\r\n            <TransitionGroup component={null}>\r\n                {!complete && (\r\n                    <Transition\r\n                        appear\r\n                        mountOnEnter\r\n                        unmountOnExit\r\n                        timeout={1600}\r\n                        onEnter={reflow}\r\n                    >\r\n                        {status => (\r\n                            <form\r\n                                className=\"contact__form\"\r\n                                method=\"post\"\r\n                                onSubmit={onSubmit}\r\n                            >\r\n                                <Heading\r\n                                    className={classNames(\r\n                                        'contact__title',\r\n                                        `contact__title--${status}`,\r\n                                        {\r\n                                            'contact__title--hidden': prerender,\r\n                                        }\r\n                                    )}\r\n                                    level={3}\r\n                                    as=\"h1\"\r\n                                    style={getDelay(\r\n                                        tokens.base.durationXS,\r\n                                        initDelay,\r\n                                        0.3\r\n                                    )}\r\n                                >\r\n                                    <DecoderText\r\n                                        text=\"Say hello\"\r\n                                        start={status !== 'exited' && !prerender}\r\n                                        delay={300}\r\n                                    />\r\n                                </Heading>\r\n                                <Divider\r\n                                    className={classNames(\r\n                                        'contact__divider',\r\n                                        `contact__divider--${status}`,\r\n                                        { 'contact__divider--hidden': prerender }\r\n                                    )}\r\n                                    style={getDelay(\r\n                                        tokens.base.durationXS,\r\n                                        initDelay,\r\n                                        0.4\r\n                                    )}\r\n                                />\r\n                                <Input\r\n                                    required\r\n                                    className={classNames(\r\n                                        'contact__input',\r\n                                        `contact__input--${status}`,\r\n                                        {\r\n                                            'contact__input--hidden': prerender,\r\n                                        }\r\n                                    )}\r\n                                    style={getDelay(tokens.base.durationXS, initDelay)}\r\n                                    autoComplete=\"email\"\r\n                                    label=\"Your Email\"\r\n                                    type=\"email\"\r\n                                    maxLength={512}\r\n                                    {...email}\r\n                                />\r\n                                <Input\r\n                                    required\r\n                                    multiline\r\n                                    className={classNames(\r\n                                        'contact__input',\r\n                                        `contact__input--${status}`,\r\n                                        {\r\n                                            'contact__input--hidden': prerender,\r\n                                        }\r\n                                    )}\r\n                                    style={getDelay(tokens.base.durationS, initDelay)}\r\n                                    autoComplete=\"off\"\r\n                                    label=\"Message\"\r\n                                    maxLength={4096}\r\n                                    {...message}\r\n                                />\r\n                                <TransitionGroup component={null}>\r\n                                    {!!statusError && (\r\n                                        <Transition\r\n                                            timeout={msToNum(tokens.base.durationM)}\r\n                                        >\r\n                                            {errorStatus => (\r\n                                                <div\r\n                                                    className={classNames(\r\n                                                        'contact__form-error',\r\n                                                        `contact__form-error--${errorStatus}`\r\n                                                    )}\r\n                                                    style={{\r\n                                                        '--height': isVisible(errorStatus)\r\n                                                            ? numToPx(\r\n                                                                  errorRef.current?.getBoundingClientRect()\r\n                                                                      .height\r\n                                                              )\r\n                                                            : '0px',\r\n                                                    }}\r\n                                                >\r\n                                                    <div\r\n                                                        className=\"contact__form-error-content\"\r\n                                                        ref={errorRef}\r\n                                                    >\r\n                                                        <div className=\"contact__form-error-message\">\r\n                                                            <Icon\r\n                                                                className=\"contact__form-error-icon\"\r\n                                                                icon=\"error\"\r\n                                                            />\r\n                                                            {statusError}\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            )}\r\n                                        </Transition>\r\n                                    )}\r\n                                </TransitionGroup>\r\n                                <Button\r\n                                    className={classNames(\r\n                                        'contact__button',\r\n                                        `contact__button--${status}`,\r\n                                        {\r\n                                            'contact__button--hidden': prerender,\r\n                                            'contact__button--sending': sending,\r\n                                        }\r\n                                    )}\r\n                                    style={getDelay(tokens.base.durationM, initDelay)}\r\n                                    disabled={sending}\r\n                                    loading={sending}\r\n                                    loadingText=\"Sending...\"\r\n                                    icon=\"send\"\r\n                                    type=\"submit\"\r\n                                >\r\n                                    Send Message\r\n                                </Button>\r\n                            </form>\r\n                        )}\r\n                    </Transition>\r\n                )}\r\n                {complete && (\r\n                    <Transition\r\n                        appear\r\n                        mountOnEnter\r\n                        unmountOnExit\r\n                        onEnter={reflow}\r\n                        timeout={0}\r\n                    >\r\n                        {status => (\r\n                            <div className=\"contact__complete\" aria-live=\"polite\">\r\n                                <Heading\r\n                                    level={3}\r\n                                    as=\"h3\"\r\n                                    className={classNames(\r\n                                        'contact__complete-title',\r\n                                        `contact__complete-title--${status}`\r\n                                    )}\r\n                                >\r\n                                    Message Sent\r\n                                </Heading>\r\n                                <Text\r\n                                    size=\"l\"\r\n                                    className={classNames(\r\n                                        'contact__complete-text',\r\n                                        `contact__complete-text--${status}`\r\n                                    )}\r\n                                    style={getDelay(tokens.base.durationXS)}\r\n                                >\r\n                                    I’ll get back to you within a couple days, sit tight\r\n                                </Text>\r\n                                <Button\r\n                                    secondary\r\n                                    iconHoverShift\r\n                                    className={classNames(\r\n                                        'contact__complete-button',\r\n                                        `contact__complete-button--${status}`\r\n                                    )}\r\n                                    style={getDelay(tokens.base.durationM)}\r\n                                    href=\"/\"\r\n                                    icon=\"chevronRight\"\r\n                                >\r\n                                    Back to homepage\r\n                                </Button>\r\n                            </div>\r\n                        )}\r\n                    </Transition>\r\n                )}\r\n            </TransitionGroup>\r\n        </Section>\r\n    )\r\n}\r\n\r\nexport default Contact\r\n"],"sourceRoot":""}